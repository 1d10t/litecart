<?php

  class pm_sveawebpay {
    private $system;
    public $id = __CLASS__;
    public $name = 'SveaWebPay';
    public $description = '';
    public $author = 'ACME Corporation';
    public $version = '1.0';
    public $support_link = 'https://www.sveawebpay.se';
    public $website = 'https://www.sveawebpay.se';
    public $priority = 0;
    
    public function __construct() {
      global $system;
      $this->system = $system;
    }
    
  /*
   * Return selectable payment options for checkout
   */
    public function options() {
      
      $options = array();
      
    // If not enabled
      if ($this->settings['status'] != 'Enabled') return;
      
    // If not in geo zone
      if (!empty($this->settings['geo_zone_id'])) {
        if (!$this->system->functions->reference_in_geo_zone($this->settings['geo_zone_id'], $destination['country_code'], $destination['zone_code'])) return;
      }
      
      if (empty($this->settings['username'])) return;
      
      if ($this->settings['card_status'] == 'Enabled') {
        $options[] = array(
          'id' => 'card',
          'icon' => 'images/payment/sveawebpay-card.png',
          'name' => $this->system->language->translate(__CLASS__.':title_card', 'Card'),
          'description' => $this->system->language->translate(__CLASS__.':description_card', ''),
          'fields' => '',
          'cost' => 0,
          'tax_class_id' => 0,
        );
      }
      
      if ($this->settings['invoice_status'] == 'Enabled') {
        $options[] = array(
          'id' => 'invoice',
          'icon' => 'images/payment/sveawebpay-invoice.png',
          'name' => $this->system->language->translate(__CLASS__.':title_invoice', 'Invoice'),
          'description' => $this->system->language->translate(__CLASS__.':description_invoice', ''),
          'fields' => '',
          'cost' => $this->settings['invoice_fee'],
          'tax_class_id' => $this->settings['tax_class_id'],
        );
      }
      
      if ($this->settings['internetbank_status'] == 'Enabled') {
        $options[] = array(
            'id' => 'internetbank',
            'icon' => 'images/payment/sveawebpay-internetbank.png',
            'name' => $this->system->language->translate(__CLASS__.':title_internet_bank', 'Internet Bank'),
            'description' => $this->system->language->translate(__CLASS__.':description_internet_bank', ''),
            'fields' => '',
            'cost' => 0,
            'tax_class_id' => 0,
        );
      }
      
      if ($this->settings['partpayment_status'] == 'Enabled') {
        $options[] = array(
            'id' => 'partpayment',
            'icon' => 'images/payment/sveawebpay-partpay.png',
            'name' => $this->system->language->translate(__CLASS__.':title_part_payment', 'Part Payment'),
            'description' => $this->system->language->translate(__CLASS__.':description_part_payment', ''),
            'fields' => '',
            'cost' => 0,
            'tax_class_id' => 0,
        );
      }
      
      return array(
        'title' => $this->name,
        'options' => $options
      );
    }
    
    public function pre_check() {
    }
    
    public function transfer() {
      global $order;
      
      if (empty($this->settings['username'])) return;
      
      if (!in_array($order->data['currency_code'], explode(',', 'SEK,NOK,DKK,EUR'))) return;
      
      $fields = array(
        'Username'      =>  $this->settings['username'],
        'OrderId'       =>  $order->data['id'],
        'ResponseURL'   =>  $this->system->document->link('order_process.php'),
        'Testmode'      =>  ($this->settings['gateway'] == 'Test') ? 'True' : 'False',
        'Language'      =>  $order->data['language_code'],
        'Country'       =>  $order->data['customer']['country_code'],
        'Currency'      =>  $order->data['currency_code'],
        'Module'        =>  'LiteCart',
        'Version'       =>  '2',
      );
      
      list($payment_module, $payment_option) = explode(':', $order->data['payment_option']['id']);
      
      $item_no = 1;
      foreach ($order->data['items'] as $item) {
        $fields['Row'.$item_no.'Description'] = $item['name'];
        $fields['Row'.$item_no.'Quantity'] = $item['quantity'];
        $fields['Row'.$item_no.'AmountExVAT'] = $this->system->currency->format($item['price'], true, true);
        $fields['Row'.$item_no.'VATPercentage'] = $item['tax'] / $item['price'] * 100;
        $item_no++;
      }
      
      foreach ($order->data['order_total'] as $row) {
        if ($row['calculate']) {
          $fields['Row'.$item_no.'Description'] = $row['title'];
          $fields['Row'.$item_no.'AmountExVAT'] = $row['value'];
          $fields['Row'.$item_no.'VATPercentage'] = $row['tax'] / $row['value'] * 100;
          $item_no++;
        }
      }
      
      switch($payment_option) {
        case 'card':
          $gateway_url = 'https://partnerweb.sveaekonomi.se/webpayhosted2/initiatepayment.aspx';
          $fields['Paymentmethod'] = 'card';
          break;
        case 'invoice':
          $gateway_url = 'https://partnerweb.sveaekonomi.se/webpayhosted2/initiatepayment.aspx';
          $fields['Paymentmethod'] = 'invoice';
          break;
        case 'partpayment':
          $gateway_url = 'https://partnerweb.sveaekonomi.se/webpayhosted2/initiatepayment.aspx';
          $fields['Paymentmethod'] = 'partpayment';
          break;
        case 'internetbank':
          $gateway_url = 'https://partnerweb.sveaekonomi.se/webpayhosted2/initiatepayment.aspx';
          $fields['Paymentmethod'] = 'internetbank';
          break;
        default:
          trigger_error('Unknown payment option', E_USER_ERROR);
      }
      
    // Build HTTP GET query
      $query_fields = array();
      foreach ($fields as $key => $value) {
        $query_fields[] = mb_convert_encoding($key .'='. $value, 'utf-8');
      }
      
    // Append query parameters to gateway_url
      $gateway_url = $gateway_url .'?'. implode('&', $query_fields);
      
    // Append checksum to gateway_url
      $gateway_url = $gateway_url .'&MD5='. md5($gateway_url . $this->settings['password']);
      
      return array(
      'action' => $gateway_url,
        'method' => 'get',
        'fields' => null,
      );
    }
    
    public function verify() {
      global $order;
      
      $errors = array();
      
      if (empty($_GET)) {
        header('Location: '. $this->system->document->link(WS_DIR_HTTP_HOME . 'checkout.php'));
        exit;
      }
      
    // Verify MD5
      list($query_string,) = explode('&MD5=', $_SERVER['QUERY_STRING']);
      $checksum = md5($this->system->document->link(WS_DIR_HTTP_HOME . 'order_process.php') .'?'. $query_string . $this->settings['password']);
      if (empty($_GET['MD5']) || $checksum != $_GET['MD5']) $errors[] = 'MD5 failed';
      
    // Handle failed payments
      if (empty($_GET['Success'])) {
        $errors[] = 'Error: Payment failed';
      } else {
        if (strtolower($_GET['Success']) != 'true') {
          if (isset($_GET['ErrorCode'])) {
            $errors[] = 'Error: Code '. $_GET['ErrorCode'];
          } else {
            $errors[] = 'Error: Unknown error';
          }
        }
      }
      
      if (isset($_GET['SecurityNumber'])) $order->data['customer']['tax_id'] = $_GET['SecurityNumber'];
      
      if (isset($_GET['Firstname'])) {
        $order->data['customer']['firstname'] = $_GET['Firstname'];
        $order->data['customer']['lastname']  = $_GET['Lastname'];
        $order->data['customer']['address1']  = $_GET['AddressLine1'];
        $order->data['customer']['address2']  = $_GET['AddressLine2'];
        $order->data['customer']['zone_name'] = $_GET['PostArea'];
        $order->data['customer']['postcode']  = $_GET['PostCode'];
      }
      
      if (!empty($errors)) {
        return array(
          'order_status_id' => $this->settings['order_status_id_error'],
          'transaction_id' => '',
          'errors' => $errors[0],
        );
      }
      
      return array(
        'order_status_id' => $this->settings['order_status_id_complete'],
        'transaction_id' => '',
        'errors' => '',
      );
    }
    
    public function after_process() {
    }
    
    public function callback() {
    }
    
    function settings() {
      return array(
        array(
          'key' => 'status',
          'default_value' => 'Enabled',
          'title' => $this->system->language->translate(__CLASS__.':title_status', 'Status'),
          'description' => $this->system->language->translate(__CLASS__.':description_status', ''),
          'function' => 'radio("Enabled", "Disabled")',
        ),
        array(
          'key' => 'card_status',
          'default_value' => 'Enabled',
          'title' => $this->system->language->translate(__CLASS__.':title_card_status', 'Card Status'),
          'description' => $this->system->language->translate(__CLASS__.':description_card_status', ''),
          'function' => 'radio("Enabled", "Disabled")',
        ),
        array(
          'key' => 'internetbank_status',
          'default_value' => 'Enabled',
          'title' => $this->system->language->translate(__CLASS__.':title_internetbank_status', 'Internet Bank Status'),
          'description' => $this->system->language->translate(__CLASS__.':description_internetbank_status', ''),
          'function' => 'radio("Enabled", "Disabled")',
        ),
        array(
          'key' => 'invoice_status',
          'default_value' => 'Enabled',
          'title' => $this->system->language->translate(__CLASS__.':title_invoice_status', 'Invoice Status'),
          'description' => $this->system->language->translate(__CLASS__.':description_invoice_status', ''),
          'function' => 'radio("Enabled", "Disabled")',
        ),
        array(
          'key' => 'partpayment_status',
          'default_value' => 'Enabled',
          'title' => $this->system->language->translate(__CLASS__.':title_partpayment_status', 'Part Payment Status'),
          'description' => $this->system->language->translate(__CLASS__.':description_partpayment_status', ''),
          'function' => 'radio("Enabled", "Disabled")',
        ),
        array(
          'key' => 'username',
          'default_value' => '',
          'title' => $this->system->language->translate(__CLASS__.':title_api_username', 'API Username'),
          'description' => $this->system->language->translate(__CLASS__.':description_api_username', 'Your sveawebpay API username.'),
          'function' => 'input()',
        ),
        array(
          'key' => 'password',
          'default_value' => '',
          'title' => $this->system->language->translate(__CLASS__.':title_api_password', 'API Password'),
          'description' => $this->system->language->translate(__CLASS__.':description_api_password', 'Your sveawebpay API password.'),
          'function' => 'input()',
        ),
        array(
          'key' => 'gateway',
          'default_value' => 'Live',
          'title' => $this->system->language->translate(__CLASS__.':title_gateway', 'Gateway'),
          'description' => $this->system->language->translate(__CLASS__.':description_gateway', 'Select your payment gateway.'),
          'function' => 'radio(\'Test\',\'Live\')',
        ),
        array(
          'key' => 'invoice_fee',
          'default_value' => '0',
          'title' => $this->system->language->translate(__CLASS__.':title_cost', 'Invoice Fee'),
          'description' => $this->system->language->translate(__CLASS__.':description_invoice_fee', ''),
          'function' => 'decimal()',
        ),
        array(
          'key' => 'tax_class_id',
          'default_value' => '',
          'title' => $this->system->language->translate(__CLASS__.':title_tax_class', 'Tax Class'),
          'description' => $this->system->language->translate(__CLASS__.':description_tax_class', 'The tax class for the invoice fee.'),
          'function' => 'tax_classes()',
        ),
        array(
          'key' => 'order_status_id_complete',
          'default_value' => '0',
          'title' => $this->system->language->translate(__CLASS__.':title_order_status', 'Order Status') .': '. $this->system->language->translate(__CLASS__.':title_complete', 'Complete'),
          'description' => $this->system->language->translate(__CLASS__.':description_order_status', 'Give successful orders made with this payment module the following order status.'),
          'function' => 'order_status()',
        ),
        array(
          'key' => 'order_status_id_error',
          'default_value' => '0',
          'title' => $this->system->language->translate(__CLASS__.':title_order_status', 'Order Status') .': '. $this->system->language->translate(__CLASS__.':title_error', 'Error'),
          'description' => $this->system->language->translate(__CLASS__.':description_order_status', 'Give failed orders made with this payment module the following order status.'),
          'function' => 'order_status()',
        ),
        array(
          'key' => 'geo_zone_id',
          'default_value' => '',
          'title' => $this->system->language->translate(__CLASS__.':title_geo_zone_limitation', 'Geo Zone Limitation'),
          'description' => $this->system->language->translate(__CLASS__.':description_geo_zone', 'Limit this module to the selected geo zone. Otherwise leave blank.'),
          'function' => 'geo_zones()',
        ),
        array(
          'key' => 'priority',
          'default_value' => '0',
          'title' => $this->system->language->translate(__CLASS__.':title_priority', 'Priority'),
          'description' => $this->system->language->translate(__CLASS__.':description_priority', 'Process this module in the given priority order.'),
          'function' => 'int()',
        ),
      );
    }
    
    public function install() {}
    
    public function uninstall() {}
  }
    
?>